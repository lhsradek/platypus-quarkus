version: '3.9'

networks:
  default:
    external: true
    name: ${INT_NETWORK}

services:

#
# === Platypus Quarkus ===
#
  quarkus:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    image: lhsradek/platypus-quarkus:v1
    container_name: "${APP_NICK}-${APP_ID}"
    hostname: "${APP_NICK}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - JAVA_OPTS=${JAVA_OPTS}
      - PLATYPUS_APPLICATION_ARTIFACTID=platypus-quarkus
      - PLATYPUS_HOST_NAME=not.intranet.local
      - PLATYPUS_REMOTE_SERVER=host.docker.internal
      - PLATYPUS_API_KEY=${PLATYPUS_API_KEY}
      - PLATYPUS_JOLOKIA_USERNAME=${JOLOKIA_USERNAME}
      - PLATYPUS_JOLOKIA_PASSWORD=${JOLOKIA_PASSWORD}
      - QUARKUS_PROFILE=dev
      - QUARKUS_APPLICATION_NAME=fpt-platypus
      - QUARKUS_DEVSERVICES_ENABLED=true
      - QUARKUS_DATASOURCE_DB-KIND=postgresql
      - QUARKUS_DATASOURCE_JDBC=jdbc:postgresql://postgres:5432/platypus?search_path=public
      - QUARKUS_DATASOURCE_USERNAME=${DB_USERNAME}
      - QUARKUS_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - QUARKUS_DATASOURCE_JDBC_DRIVER=org.postgresql.Driver
      - QUARKUS_HIBERNATE-ORM_ACTIVE=true
      - QUARKUS_HIBERNATE-ORM_LOG_SQL=false
      - QUARKUS_HIBERNATE-ORM_LOG_FORMAT-SQL=true
      - QUARKUS_HIBERNATE-ORM_DATABASE_GENERATION=none
      - QUARKUS_HIBERNATE-ORM_DATABASE_DEFAULT-SCHEMA=public
      - QUARKUS_HIBERNATE-ORM_DIALECT=org.hibernate.dialect.PostgreSQL95Dialect
      - QUARKUS_HIBERNATE-ORM_PACKAGES=local.intranet.quarkus.api.model.entity,io.quarkus.hibernate.orm.panache,org.hibernate.envers
      - QUARKUS_HIBERNATE-ENVERS_ACTIVE=true
      - QUARKUS_HIBERNATE-ENVERS_GLOBAL-WITH-MODIFIED-FLAG=true
      - QUARKUS_HIBERNATE-ENVERS_STORE-DATA-AT-DELETE=false
      - QUARKUS_HIBERNATE-ENVERS_TRACK-ENTITIES-CHANGED-IN-REVISION=false
      - QUARKUS_HIBERNATE-ENVERS_ALLOW-IDENTIFIER-REUSE=false
      - QUARKUS_HIBERNATE-ENVERS_MODIFIED-FLAG-SUFFIX=_MOD
      - QUARKUS_FLYWAY_JDBC=jdbc:postgresql://postgres:5432/platypus?search_path=public
      - QUARKUS_FLYWAY_USERNAME=${DB_USERNAME}
      - QUARKUS_FLYWAY_PASSWORD=${DB_PASSWORD}
      - QUARKUS_FLYWAY_LOCATIONS=classpath:db/migration,db/specific/postgresql
    networks:
      - default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      # - "8480:8480"
      - "8484:8484"
    volumes:
      - ./target/platypus-quarkus-1.0.0-SNAPSHOT-native-image-source-jar:/project:rw

# 
# === PostgreSQL ===
# 
  postgres:
    image: postgres:14-alpine
    container_name: "${APP_NICK}-${APP_ID}-db"
    hostname: "db.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - POSTGRES_USERNAME=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    # ports:
    #   - 15432:5432
    networks:
      - default
    volumes:
      - ./extras/docker-entrypoint-initdb.d/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      - postgres:/var/lib/postgresql/data
      # after init db
      # - ./logs/postgres:/var/lib/postgresql/data/log:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 10s
      retries: 60

#
# === Redis ===
#        
#   redis:
#     image: redis:7-alpine
#     # Alpine Linux
#     container_name: "${APP_NICK}-${APP_ID}-redis"
#     hostname: "redis"
#     # hostname: "redis.${INT_NETWORK}"
#     restart: ${DOCKER_RESTART_POLICY}
#     networks:
#       # local network:
#       - default
#     environment:
#       - REDIS_PASSWORD=${REDIS_PASSWORD}
#     # ports:
#     #  - 16379:6379
#     volumes:
#       - redis:/data

#         
# === Nginx for Adminer ===
#         
#   # Alpine Linux - nginx
#   nginx:
#     depends_on:
#       postgres:
#         condition: service_healthy
#     image: nginx:alpine
#     # image: lhsradek/lhsdock:v3
#     container_name: "${APP_NICK}-${APP_ID}-nginx"
#     hostname: "www.${INT_NETWORK}"
#     restart: ${DOCKER_RESTART_POLICY}
#     ports:
#     # - 80:80
#       - 4443:443
#     volumes:
#       - ./certs/${CERTNAME}.crt:/etc/ssl/private/cacert.pem:ro
#       - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert-key.pem:ro
#       - ./application/html:/var/www/html
#       - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
#       - ./logs/nginx:/var/log/nginx
#       - adminer:/var/www/html/ad:rw
#     networks:
#       # local network:
#       - default
#     healthcheck:
#       test: "curl -s -I http://localhost/nginx_status | grep -q 'HTTP/1.1 200 OK'"
#       interval: 10s
#       timeout: 10s
#       retries: 500

#         
# === Adminer ===
#         
#   ad:
#     depends_on:
#       postgres:
#         condition: service_healthy
#     # Alpine
#     image: adminer:fastcgi
#     container_name: "${APP_NICK}-${APP_ID}-ad"
#     hostname: "ad-php.${INT_NETWORK}"
#     restart: ${DOCKER_RESTART_POLICY}
#     networks:
#       # local network:
#       - default
#     volumes:
#       - adminer:/var/www/html:rw
         
volumes:
  postgres:
    external: false
    name: "${APP_ID}-db"
  # adminer:
  #   external: false
  #   name: "${APP_ID}-adminer"
  # redis:
  #   external: false
  #   name: "${APP_ID}-redis"
