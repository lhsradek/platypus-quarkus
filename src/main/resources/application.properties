# Config for Platypus Quarkus see
# https://quarkus.io/guides/all-config
# https://quarkus.io/guides/vertx-reference

# **platypus**
platypus.application.artifactId=platypus-quarkus
# platypus.host.name=localhost
# platypus.host.name=not.intranet.local
platypus.host.name=fpt.platel
# platypus.host.name=mamka.platel
# platypus.remote.server=localhost
platypus.remote.server=host.docker.internal
platypus.deployment.environment=development
# in jdk
# platypus.download.directory=src/main/resources/META-INF/resources/downloads
# in docker-jvm
# platypus.download.directory=/deployments
# # in /deployments/app is platypus-quarkus-1.0.0-SNAPSHOT.jar
# platypus.download.directory=/deployments/app
# platypus.download.directory=/deployments/app/platypus-quarkus-1.0.0-SNAPSHOT.jar
# # in /deployments/quarkus are generated-bytecode.jar quarkus-application.dat transformed-bytecode.jar
# platypus.download.directory=/deployments/quarkus
# in docker-native
# in /work is application
# platypus.download.directory=/work
# and downloads if mounted in docker-compose.yml volumes: - ./src/main/resources/META-INF/resources/downloads:/work/downloads:ro
platypus.download.directory=/work/downloads

# platypus.engine=jdk
platypus.engine=GraalVM

# **quarkus**
# quarkus.profile=dev
# quarkus.profile=test
quarkus.profile=native
quarkus.application.name=ftp-platypus
#quarkus.application.name=mamka-platypus

quarkus.log.handler.gelf.enabled=false
quarkus.opentelemetry.enabled=false

# **platypus** - Job
platypus.job.enabled=true
platypus.job.cron=0 */15 * * * ?
platypus.job.message=Hello from job of Platypus Quarkus on ${platypus.host.name}
# #
platypus.api.key=${PLATYPUS_API_KEY}
platypus.jolokia.username=${JOLOKIA_USERNAME}
platypus.jolokia.password=${JOLOKIA_PASSWORD}

# **quarkus** - Log
quarkus.log.file.enable=false
quarkus.log.file.level=INFO
quarkus.log.console.enable=true
quarkus.log.console.level=INFO
quarkus.log.category."local.intranet".level=DEBUG
quarkus.log.category."io.quarkus".level=INFO
# HTTP Log
quarkus.http.access-log.enabled=false
# quarkus.http.access-log.enabled=true
quarkus.http.access-log.exclude-pattern=^/q/metrics
quarkus.http.access-log.log-to-file=true
# Gelf Log - quarkus.log.handler.gelf.enabled=false
quarkus.log.handler.gelf.origin-host=${quarkus.application.name}
quarkus.log.handler.gelf.host=tcp:${platypus.remote.server}
quarkus.log.handler.gelf.port=12201
quarkus.log.handler.gelf.version=1.1
quarkus.log.handler.gelf.include-full-mdc=true
quarkus.log.metrics.enabled=true

# quarkus.resteasy.path=/
quarkus.resteasy-reactive.path=/

quarkus.devservices.enabled=true
# quarkus.redis.devservices.enabled=true
quarkus.devservices.timeout=120

# **Jdbc**
#Database connection
quarkus.datasource.db-kind=postgresql
quarkus.datasource.metrics.enabled=true
quarkus.datasource.username=${DB_USERNAME}
quarkus.datasource.password=${DB_PASSWORD}
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.min-size=4
quarkus.datasource.jdbc.driver=org.postgresql.Driver
quarkus.datasource.jdbc.enable-metrics=true
# quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/lhs_platypus_fpt?search_path=public
# quarkus.datasource.jdbc.url=jdbc:postgresql://host.docker.internal:5432/lhs_platypus_fpt?search_path=public
# quarkus.datasource.jdbc.url=jdbc:postgresql://${platypus.remote.server}:5432/lhs_platypus_${quarkus.profile}?search_path=public
quarkus.datasource.jdbc.url=jdbc:postgresql://postgres:5432/platypus?search_path=public

# quarkus.datasource.dev.db-kind=postgresql
# quarkus.datasource.dev.username=${DB_USERNAME}
# quarkus.datasource.dev.password=${DB_PASSWORD}
# quarkus.datasource.dev.jdbc.max-size=8
# quarkus.datasource.dev.jdbc.min-size=4
# quarkus.datasource.dev.jdbc.driver=org.postgresql.Driver
# quarkus.datasource.dev.jdbc.enable-metrics=true
# quarkus.datasource.dev.jdbc.url=jdbc:postgresql://postgres:5432/platypus?search_path=public

# **Hibernate**
quarkus.hibernate-orm.active=true
quarkus.hibernate-orm.log.sql=false
quarkus.hibernate-orm.log.format-sql=true
quarkus.hibernate-orm.database.generation=none
# quarkus.hibernate-orm.database.generation=drop-and-create 
# schema for postgres
quarkus.hibernate-orm.database.default-schema=public
# quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL95Dialect
quarkus.hibernate-orm.packages=local.intranet.quarkus.api.model.entity,io.quarkus.hibernate.orm.panache,org.hibernate.envers
# Envers
quarkus.hibernate-envers.active=true
quarkus.hibernate-envers.global-with-modified-flag=true
quarkus.hibernate-envers.store-data-at-delete=false
quarkus.hibernate-envers.track-entities-changed-in-revision=false
quarkus.hibernate-envers.allow-identifier-reuse=false
quarkus.hibernate-envers.modified-flag-suffix=_MOD

quarkus.transaction-manager.enable-recovery=false

# Flyway configuration for the default datasource:
# in test is quarkus.flyway.migrate-at-start by src/test/java/local/intranet/quarkus/CustomProfile.java
quarkus.flyway.migrate-at-start=true
# schema for postgres
quarkus.flyway.schemas=public
quarkus.flyway.default-schema=public
quarkus.flyway.username=${DB_USERNAME}
quarkus.flyway.password=${DB_PASSWORD}
# quarkus.flyway.jdbc-url=jdbc:postgresql://localhost:5432/lhs_platypus_fpt?search_path=public
# quarkus.flyway.jdbc-url=jdbc:postgresql://host.docker.internal:5432/lhs_platypus_fpt?search_path=public
# quarkus.flyway.jdbc-url=jdbc:postgresql://${platypus.remote.server}:5432/lhs_platypus_fpt?search_path=public
quarkus.flyway.jdbc-url=jdbc:postgresql://postgres:5432/platypus?search_path=public
quarkus.flyway.locations=classpath:db/migration,db/specific/postgresql
# quarkiverse.logging.logback:quarkus-logging-logback when use reactive-pg-client
# https://quarkiverse.github.io/quarkiverse-docs/quarkus-logging-logback/dev/index.html
# https://quarkus.io/extensions/io.quarkiverse.logging.logback/quarkus-logging-logback
# https://stackoverflow.com/questions/62403557/logback-support-in-quarkus
# https://stackoverflow.com/questions/66268122/reactive-hibernate-on-quarkus-with-flyway

# **Qute**
quarkus.qute.remove-standalone-lines=true

# **Scheduler**
quarkus.scheduler.enabled=true
quarkus.scheduler.metrics.enabled=true
quarkus.scheduler.tracing.enabled=true
quarkus.scheduler.cron-type=quartz

# **OpenApi** Rest services
quarkus.swagger-ui.deep-linking=true
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/q/swagger-ui
quarkus.swagger-ui.show-extensions=false
quarkus.swagger-ui.show-common-extensions=false
quarkus.swagger-ui.doc-expansion=none
quarkus.swagger-ui.default-model-rendering=example
quarkus.swagger-ui.default-models-expand-depth=-1
quarkus.swagger-ui.syntax-highlight=obsidian
quarkus.swagger-ui.operations-sorter=alpha
quarkus.swagger-ui.tags-sorter=alpha
quarkus.swagger-ui.validator-url=localhost

# ** openapi **
# mp.openapi.scan.disable=true
quarkus.smallrye-openapi.info-title=Platypus Quarkus
quarkus.smallrye-openapi.info-version=1.0.0-SNAPSHOT
quarkus.smallrye-openapi.info-description=<h3>Platypus Quarkus Project</h3><p><ul><li>Jpa, Hibernate, Audit</li><li>Flyway for migrate data</li><li>Prometheus Metrics, OpenTelemetry</li><li>Logs: files, syslog, graylog, db-appender, (web) console</li><li>SmallRye Health, Reactive, Vert.x, swagger: ${platypus.host.name}</li></ul></p>
# quarkus.smallrye-openapi.info-terms-of-service=
quarkus.smallrye-openapi.info-contact-email=radek.kadner@gmail.com
quarkus.smallrye-openapi.info-contact-name=Radek KÃ¡dner
quarkus.smallrye-openapi.info-contact-url=https://github.com/lhsradek/platypus-quarkus
quarkus.smallrye-openapi.info-license-name=The MIT License
quarkus.smallrye-openapi.info-license-url=https://opensource.org/licenses/MIT

quarkus.vertx.cluster.host=0.0.0.0
# quarkus.vertx.cluster.host=${platypus.host.name}
quarkus.vertx.cluster.public-host=0.0.0.0
# quarkus.vertx.cluster.public-host=${platypus.host.name}
quarkus.vertx.customize-arc-context=true
quarkus.vertx.eventbus.trust-all=true

# Micrometer
quarkus.micrometer.binder.jvm=true
quarkus.micrometer.binder.http-client.enabled=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.redis.enabled=true
quarkus.micrometer.binder.system=true
quarkus.micrometer.binder.vertx.enabled=false
# quarkus.micrometer.export.jmx.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Opentelemetry - quarkus.opentelemetry.enabled=false
# https://quarkus.io/guides/all-config#quarkus-opentelemetry_quarkus-opentelemetry-opentelemetry
# https://www.elastic.co/guide/en/apm/guide/current/open-telemetry-direct.html
quarkus.opentelemetry.tracer.enabled=true
quarkus.opentelemetry.tracer.resource-attributes=deployment.environment=${platypus.deployment.environment}
quarkus.opentelemetry.tracer.exporter.otlp.export-timeout=15S
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://${platypus.remote.server}:8200
quarkus.opentelemetry.tracer.exporter.otlp.headers=Authorization=Bearer an_apm_secret_token
quarkus.opentelemetry.tracer.include-static-resources=true

# **http**
# https://quarkus.io/guides/http-reference
# https://stackoverflow.com/questions/55588382/quarkus-https-restful-service
quarkus.http.host=0.0.0.0
# quarkus.http.host=${platypus.host.name}
# 8081 is for quarkus.http.test-port not occupy
# quarkus.http.port=8082
quarkus.http.port=8080
quarkus.http.ssl-port=8443

# java keytool makes keystore.jks for quarkus.http.ssl.certificate.key-store-file
# quarkus.http.ssl.certificate.key-store-file=keystore.jks
# quarkus.http.ssl.certificate.key-store-file=/work/certs/keystore.jks
# Elastic Certificate Tool makes ca.crt, ${platypus.host.name}.crt and ${platypus.host.name}.key
# quarkus.http.ssl.certificate.key-files=kibana.platel.key
# quarkus.http.ssl.certificate.key-files=/work/certs/fpt.platel.key
# quarkus.http.ssl.certificate.key-files=/work/certs/kibana.platel.key
quarkus.http.ssl.certificate.key-files=/work/certs/mamka.key
# quarkus.http.ssl.certificate.files=kibana.platel.crt
# quarkus.http.ssl.certificate.files=/work/certs/fpt.platel.crt
# quarkus.http.ssl.certificate.files=/work/certs/kibana.platel.crt
quarkus.http.ssl.certificate.files=/work/certs/mamka.crt
# ${platypus.host.name}.pem is chained: cat ca.crt ${platypus.host.name}.crt > ${platypus.host.name}.pem
# If you have on server ca.crt among your certificates, you can use ${platypus.host.name}.pem
# quarkus.http.ssl.certificate.files=${platypus.host.name}.pem
# https://quarkus.io/guides/security-jwt
# mp.jwt.verify.publickey.location=${platypus.host.name}.pem

# quarkus.http.enable-compression=true
# in test is quarkus.http.insecure-requests=enabled by src/test/java/local/intranet/quarkus/CustomProfile.java
quarkus.http.insecure-requests=enabled
# quarkus.http.insecure-requests=redirect
# quarkus.http.insecure-requests=disabled

# quarkus.http.host-enabled=false
quarkus.http.proxy.proxy-address-forwarding=true
# quarkus.http.proxy.allow-forwarded=true
# quarkus.http.proxy.enable-forwarded-host=true
# quarkus.http.proxy.enable-forwarded-prefix=true

quarkus.ssl.native=true

quarkus.http.auth.basic=true
quarkus.http.auth.form.enabled=true
quarkus.http.auth.form.login-page=/login
quarkus.http.auth.form.post-location=/signin
quarkus.http.auth.form.username-parameter=username
quarkus.http.auth.form.password-parameter=password

quarkus.dev-ui.cors.enabled=true
# https://quarkus.io/guides/http-reference#cors-filter
quarkus.http.cors.origins=https://${platypus.host.name}
# %dev.quarkus.http.cors.origins=/.*/
quarkus.http.cors=true
quarkus.http.cors.methods=GET,PUT,POST,PATCH,DELETE,OPTIONS,HEAD
# quarkus.http.cors.headers=X-Custom
# quarkus.http.cors.headers=accept, authorization, content-type, x-requested-with, X-Custom
quarkus.http.cors.headers=*
# quarkus.http.cors.exposed-headers=Content-Disposition
quarkus.http.cors.exposed-headers=*
quarkus.http.cors.access-control-max-age=24H
quarkus.http.cors.access-control-allow-credentials=true

# Redis
# quarkus.redis.hosts=redis://${platypus.remote.server}:6379
quarkus.redis.hosts=redis://redis:6379
quarkus.redis.devservices.enabled=true
quarkus.redis.health.enabled=true
quarkus.redis.password=${REDIS_PASSWORD}

# Health
quarkus.smallrye-health.ui.enable=true
quarkus.health.extensions.enabled=true
quarkus.health.openapi.included=true
quarkus.smallrye-health.context-propagation=true

